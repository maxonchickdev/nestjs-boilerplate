services:
  nestjs-boilerplate-postgres:
    image: postgres:latest
    container_name: nestjs-boilerplate-postgres
    hostname: nestjs-boilerplate-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - nestjs-boilerplate-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-U', '$$POSTGRES_USER']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - nestjs-boilerplate-network
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  nestjs-boilerplate-redis:
    image: redis:latest
    container_name: nestjs-boilerplate-redis
    hostname: nestjs-boilerplate-redis
    env_file:
      - .env
    command: ['redis-server', '--requirepass ${REDIS_PASSWORD}']
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - nestjs-boilerplate-redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--no-auth-warning', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - nestjs-boilerplate-network

  nestjs-boilerplate-redis-insight:
    image: redis/redisinsight:latest
    container_name: nestjs-boilerplate-redis-insight
    hostname: nestjs-boilerplate-redis-insight
    env_file:
      - .env
    ports:
      - '${RI_PORT}:5540'
    networks:
      - nestjs-boilerplate-network
    restart: unless-stopped
    depends_on:
      nestjs-boilerplate-redis:
        condition: service_healthy
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - nestjs-boilerplate-redis-insight-data:/db
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  nestjs-boilerplate-prometheus:
    image: prom/prometheus:latest
    container_name: nestjs-boilerplate-prometheus
    hostname: nestjs-boilerplate-prometheus
    ports:
      - '${PROMETHEUS_PORT}:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nestjs-boilerplate-grafana:
    image: grafana/grafana:latest
    container_name: nestjs-boilerplate-grafana
    hostname: nestjs-boilerplate-grafana
    ports:
      - '${GRAFANA_PORT}:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    depends_on:
      nestjs-boilerplate-prometheus:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - nestjs-boilerplate-grafana-data:/var/lib/grafana
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:$GRAFANA_PORT/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nestjs-boilerplate-zookeeper:
    image: bitnami/zookeeper:latest
    container_name: nestjs-boilerplate-zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: ${ALLOW_ANONYMOUS_LOGIN}
      ZOO_ENABLE_AUTH: ${ZOO_ENABLE_AUTH}
      ZOO_SERVER_USERS: ${ZOO_SERVER_USERS}
      ZOO_SERVER_PASSWORDS: ${ZOO_SERVER_PASSWORDS}
    ports:
      - '2181:2181'
    volumes:
      - nestjs-boilerplate-zookeeper-data:/bitnami/zookeeper
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: ['CMD', 'zkServer.sh', 'status']
      interval: 30s
      timeout: 10s
      retries: 3

  nestjs-boilerplate-kafka:
    image: bitnami/kafka:latest
    container_name: nestjs-boilerplate-kafka
    depends_on:
      - nestjs-boilerplate-zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_ZOOKEEPER_USER: ${ZOOKEEPER_USER}
      KAFKA_CFG_ZOOKEEPER_PASSWORD: ${ZOOKEEPER_PASSWORD}
    ports:
      - '9092:9092'
      - '29092:29092'
    volumes:
      - nestjs-boilerplate-kafka-data:/bitnami/kafka
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: ['CMD', 'kafka-topics.sh', '--bootstrap-server', 'localhost:9092', '--list']
      interval: 30s
      timeout: 10s
      retries: 3

  nestjs-boilerplate-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: nestjs-boilerplate-kafka-ui
    depends_on:
      - nestjs-boilerplate-kafka
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: nestjs-boilerplate-kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper: 2181
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_PLAINTEXT
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: SCRAM-SHA-512
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USER}" password="${KAFKA_PASSWORD}";
    networks:
      - nestjs-boilerplate-network

networks:
  nestjs-boilerplate-network:
    name: nestjs-boilerplate-network
    driver: bridge
    attachable: true

volumes:
  nestjs-boilerplate-postgres-data:
  nestjs-boilerplate-redis-data:
  nestjs-boilerplate-redis-insight-data:
  nestjs-boilerplate-grafana-data:
  nestjs-boilerplate-zookeeper-data:
  nestjs-boilerplate-kafka-data:
