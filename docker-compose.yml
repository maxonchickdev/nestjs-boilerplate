services:
  nestjs-boilerplate-postgres:
    container_name: nestjs-boilerplate-postgres
    image: postgres:17.5-alpine3.22
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - nestjs-boilerplate-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    hostname: nestjs-boilerplate-postgres
  nestjs-boilerplate-mongo:
    container_name: nestjs-boilerplate-mongo
    image: mongo:8.0.10-noble
    restart: always
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - nestjs-boilerplate-mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    command:
      - '--storageEngine'
      - wiredTiger
      - '--auth'
    hostname: nestjs-boilerplate-mongo
  nestjs-boilerplate-redis:
    container_name: nestjs-boilerplate-redis
    image: redis:8.0.2-alpine
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - nestjs-boilerplate-redis-data:/data
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DATABASES: ${REDIS_DATABASES}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: redis-cli -a $REDIS_PASSWORD ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    hostname: nestjs-boilerplate-redis
  nestjs-boilerplate-redis-insight:
    container_name: nestjs-boilerplate-redis-insight
    image: redislabs/redisinsight:latest
    restart: always
    depends_on:
      nestjs-boilerplate-redis:
        condition: service_healthy
    ports:
      - ${RI_PORT}:${RI_PORT}
    volumes:
      - nestjs-boilerplate-redis-insight-data:/usr/src/app/redisinsight/api/data
    environment:
      REDISINSIGHT_DISABLE_ENCRYPTION: ${RI_DISABLE_ENCRYPTION}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    command: |
      sh -c " mkdir -p /usr/src/app/redisinsight/api/data && chown -R node:node /usr/src/app/redisinsight/api/data && ./docker-entry.sh "
    hostname: nestjs-boilerplate-redis-insight
    user: '0:0'
  nestjs-boilerplate-kafka-broker:
    container_name: nestjs-boilerplate-kafka-broker
    image: apache/kafka:latest
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
      - ${KAFKA_CONTROLLER_PORT}:${KAFKA_CONTROLLER_PORT}
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT},CONTROLLER://0.0.0.0:${KAFKA_CONTROLLER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://nestjs-boilerplate-kafka-broker:${KAFKA_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_ID}@nestjs-boilerplate-kafka-broker:${KAFKA_CONTROLLER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    hostname: nestjs-boilerplate-kafka-broker
  nestjs-boilerplate-kafka-ui:
    container_name: nestjs-boilerplate-kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - nestjs-boilerplate-kafka-broker
    ports:
      - ${KAFKA_UI_PORT}:${KAFKA_UI_PORT}
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: nestjs-boilerplate-kafka-broker:${KAFKA_PORT}
    env_file: .env
    networks:
      - nestjs-boilerplate-network
    hostname: nestjs-boilerplate-kafka-ui

volumes:
  nestjs-boilerplate-postgres-data:
    name: nestjs-boilerplate-postgres-data
    driver: local
  nestjs-boilerplate-redis-data:
    name: nestjs-boilerplate-redis-data
    driver: local
  nestjs-boilerplate-redis-insight-data:
    name: nestjs-boilerplate-redis-insight-data
    driver: local
  nestjs-boilerplate-mongo-data:
    name: nestjs-boilerplate-mongo-data
    driver: local

networks:
  nestjs-boilerplate-network:
    name: nestjs-boilerplate-network
    driver: bridge
    attachable: true
