services:
  nestjs-boilerplate-postgres:
    image: postgres:latest
    container_name: nestjs-boilerplate-postgres
    hostname: nestjs-boilerplate-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - nestjs-boilerplate-postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - nestjs-boilerplate-network

  nestjs-boilerplate-redis:
    image: redis:latest
    container_name: nestjs-boilerplate-redis
    hostname: nestjs-boilerplate-redis
    env_file:
      - .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    volumes:
      - nestjs-boilerplate-redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli --no-auth-warning -a $REDIS_PASSWORD ping
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - nestjs-boilerplate-network
    command: redis-server --requirepass $REDIS_PASSWORD

  nestjs-boilerplate-redis-insight:
    image: redislabs/redisinsight:latest
    container_name: nestjs-boilerplate-redis-insight
    hostname: nestjs-boilerplate-redis-insight
    env_file:
      - .env
    environment:
      - REDISINSIGHT_DISABLE_ENCRYPTION=${RI_DISABLE_ENCRYPTION}
    ports:
      - '${RI_PORT}:${RI_PORT}'
    volumes:
      - nestjs-boilerplate-redis-insight-data:/usr/src/app/redisinsight/api/data
    restart: always
    networks:
      - nestjs-boilerplate-network
    command: >
      sh -c "
      mkdir -p /usr/src/app/redisinsight/api/data &&
      chown -R node:node /usr/src/app/redisinsight/api/data &&
      ./docker-entry.sh
      "
    depends_on:
      nestjs-boilerplate-redis:
        condition: service_healthy

  nestjs-boilerplate-prometheus:
    image: prom/prometheus:latest
    container_name: nestjs-boilerplate-prometheus
    hostname: nestjs-boilerplate-prometheus
    env_file:
      - .env
    ports:
      - '${PROMETHEUS_PORT}:${PROMETHEUS_PORT}'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - nestjs-boilerplate-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--storage.tsdb.retention.time=30d'
    healthcheck:
      test: wget --spider -q http://localhost:$PROMETHEUS_PORT/-/healthy
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nestjs-boilerplate-grafana:
    image: grafana/grafana:latest
    container_name: nestjs-boilerplate-grafana
    hostname: nestjs-boilerplate-grafana
    env_file:
      - .env
    ports:
      - '${GF_PORT}:${GF_PORT}'
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_AUTH_DISABLE_LOGIN_FORM=${GF_AUTH_DISABLE_LOGIN_FORM}
      - GF_AUTH_ANONYMOUS_ENABLED=${GF_AUTH_ANONYMOUS_ENABLED}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}
      - GF_PATHS_PROVISIONING=${GF_PATHS_PROVISIONING}
      - GF_PATHS_CONFIG=${GF_PATHS_CONFIG}
    depends_on:
      nestjs-boilerplate-prometheus:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - nestjs-boilerplate-grafana-data:/var/lib/grafana
    networks:
      - nestjs-boilerplate-network
    healthcheck:
      test: curl -f http://localhost:$GF_PORT/api/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nestjs-boilerplate-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: nestjs-boilerplate-zookeeper
    hostname: nestjs-boilerplate-zookeeper
    env_file:
      - .env
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    ports:
      - '${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}'
    networks:
      - nestjs-boilerplate-network

  nestjs-boilerplate-kafka-broker:
    image: confluentinc/cp-kafka:latest
    hostname: nestjs-boilerplate-kafka-broker
    env_file:
      - .env
    ports:
      - '${KAFKA_PORT}:${KAFKA_PORT}'
    depends_on:
      - nestjs-boilerplate-zookeeper
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=nestjs-boilerplate-zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://nestjs-boilerplate-kafka-broker:9092,PLAINTEXT_INTERNAL://localhost:19092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - nestjs-boilerplate-network

  nestjs-boilerplate-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: nestjs-boilerplate-kafka-ui
    hostname: nestjs-boilerplate-kafka-ui
    env_file:
      - .env
    depends_on:
      - nestjs-boilerplate-kafka-broker
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=nestjs-boilerplate-kafka-broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper=2181
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=${KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL}
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM=${KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM}
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG=org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USER}" password="${KAFKA_PASSWORD}";
    networks:
      - nestjs-boilerplate-network

networks:
  nestjs-boilerplate-network:
    name: nestjs-boilerplate-network
    driver: bridge
    attachable: true

volumes:
  nestjs-boilerplate-postgres-data:
    driver: local
  nestjs-boilerplate-redis-data:
    driver: local
  nestjs-boilerplate-grafana-data:
    driver: local
  nestjs-boilerplate-zookeeper-data:
    driver: local
  nestjs-boilerplate-kafka-data:
    driver: local
  nestjs-boilerplate-redis-insight-data:
    driver: local
